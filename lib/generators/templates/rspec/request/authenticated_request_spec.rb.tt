# frozen_string_literal: true

require 'swagger_helper'

<% module_namespacing do -%>
RSpec.describe 'V1::<%= class_name.pluralize %>', type: :request do

  path '/v1/<%= class_name.pluralize.underscore %>' do
    get 'when running a GET request' do
      define_json_api_params!(pagination: true)
      security [Bearer: []]
      let(:'page[size]') { 2 }

      let!(:<%= class_name.pluralize.underscore %>) { create_list(:<%= class_name.underscore %>, 5) }

      response '403', 'needs authorization' do
        schema '$ref' => '#/components/schemas/errors_object'
        run_test! do
          expect(json).to match_structure(errors: { status: ['forbidden'] })
        end
      end

      context 'with credentials' do
        before do
          allow_any_instance_of(ApplicationController).to receive(:current_user).and_return(create(:user))
        end

        response '200', 'returns the list of <%= class_name.pluralize.underscore %>' do
          schema json_list('<%= class_name.underscore %>')
          run_test! do
            expect(json).to match_structure(
              data: a_list_of(
                type: String, attributes: {
                <%= attributes.map { |attr|
                if attr.type ==:integer || attr.type==:float
                  "#{attr.name.camelize(:lower)}: Numeric"
                elsif attr.type==:string || attr.type==:text || attr.type==:decimal
                  "#{attr.name.camelize(:lower)}: String"
                elsif attr.type == :boolean
                  "#{attr.name.camelize(:lower)}: one_of(true, false)"
                else
                  "#{attr.name.camelize(:lower)}: Object"
                end
                }.join(', ') %>
                }
              ).with(2).elements
            )
          end
        end
      end
    end

    post 'when running a POST request' do
      define_json_api_params!
      security [Bearer: []]

      parameter name: :params, in: :body, schema: {
        type: :object,
        properties: {
          <%= attributes.map { |attr|
              case attr.type
              when :integer, :float, :decimal
                "#{attr.name}: {type: :numeric}"
              when :string, :text
                 "#{attr.name}: {type: :string}"
              when :boolean
                "#{attr.name}: {type: :boolean}"
              else
                 "#{attr.name}: {type: :object}"
              end
              }.join(',') %>
          }
      }
      let(:params) do
         { <%= attributes.map.with_index {|attr, i|
              case attr.type
              when :integer
                "#{attr.name}: #{rand(100)}"
              when :decimal
                "#{attr.name}: '#{rand(10000) / 100.0}'"
              when :float
                "#{attr.name}: #{rand(10000) / 100.0}"
              when :string, :text
                 "#{attr.name}: '#{attr.name.humanize} #{i}'"
              when :boolean
                 "#{attr.name}: #{[true,false].sample}"
              else
                 "#{attr.name}: {}"
              end
              }.join(',') %> }
      end

      response '403', 'needs authorization' do
        schema '$ref' => '#/components/schemas/errors_object'
        run_test! do
          expect(json).to match_structure(errors: { status: ['forbidden'] })
        end
      end

      context 'with credentials' do
        before do
          allow_any_instance_of(ApplicationController).to receive(:current_user).and_return(create(:user))
        end

        response '201', 'creates a new <%= class_name.humanize %>' do
          schema json_single('<%= class_name.underscore %>')

          run_test! do
            expect(json).to match_structure(
              data: {
                id: String, type: '<%= class_name.pluralize.camelize(:lower) %>',
                attributes: {
                  <%= attributes.map{|attr|
                  case attr.type
                  when :decimal
                  "#{attr.name.camelize(:lower)}: params[:#{attr.name}].to_s"
                  when :float, :integer
                  "#{attr.name.camelize(:lower)}: params[:#{attr.name}]"
                  when :string, :text
                    "#{attr.name.camelize(:lower)}: params[:#{attr.name}].to_s"
                  else
                  "#{attr.name.camelize(:lower)}: params[:#{attr.name}]"
                  end
                }.join(',') %>
                }
              }
            )
          end
        end
      end
    end
  end

  path '/v1/<%= class_name.pluralize.underscore %>/{id}' do
    parameter name: 'id', in: :path, type: :string, required: true
    let!(:id) { create(:<%= class_name.underscore %>).id }

    get 'when running a GET request' do
      define_json_api_params!
      security [Bearer: []]

      response '403', 'needs authorization' do
        schema '$ref' => '#/components/schemas/errors_object'
        run_test! do
          expect(json).to match_structure(errors: { status: ['forbidden'] })
        end
      end

      context 'with credentials' do
        before do
          allow_any_instance_of(ApplicationController).to receive(:current_user).and_return(create(:user))
        end

        response '200', 'Returns the details of a <%= class_name.downcase.humanize %>' do
          schema json_single('<%= class_name.underscore %>')

          run_test! do
            expect(json).to match_structure(
              data: {
                id: id.to_s, type: String,
                attributes: {
                  <%=
                    attributes.map{|attr|
                      case attr.type
                      when :integer, :float
                        "#{attr.name.camelize(:lower)}: Numeric"
                      when :string, :text, :decimal
                        "#{attr.name.camelize(:lower)}: String"
                      when :boolean
                        "#{attr.name.camelize(:lower)}: one_of(true, false)"
                      else
                        "#{attr.name.camelize(:lower)}: Object"
                      end
                    }.join(',')
                  %>
                }
              }
            )
          end
        end
      end
    end


    delete 'when running a DELETE request' do
      define_json_api_params!
      security [Bearer: []]

      let!(:<%= class_name.underscore %>) { create(:<%= class_name.underscore %>) }

      response '403', 'needs authorization' do
        schema '$ref' => '#/components/schemas/errors_object'
        run_test! do
          expect(json).to match_structure(errors: { status: ['forbidden'] })
        end
      end

      context 'with credentials' do
        before do
          allow_any_instance_of(ApplicationController).to receive(:current_user).and_return(create(:user))
        end

        response '200', 'deletes a <%= class_name.downcase.humanize %>' do
          schema json_single('<%= class_name.underscore %>')

          let!(:id) {<%= class_name.underscore %>.id }
          run_test! do
            expect(json).to match_structure(data: { id: id.to_s })
            expect { <%= class_name.underscore %>.reload }.to raise_error(ActiveRecord::RecordNotFound)
          end
        end
      end
    end

    put 'when running a PUT request' do
      define_json_api_params!
      security [Bearer: []]

      parameter name: :params, in: :body, schema: {
        type: :object,
        properties: {
          <%= attributes.map{|attr|
              if attr.type ==:integer || attr.type==:float || attr.type==:decimal
                "#{attr.name}: {type: :numeric}"
              elsif attr.type==:string || attr.type==:text
                 "#{attr.name}: {type: :string}"
              elsif attr.type == :boolean
                "#{attr.name}: {type: :boolean}"
              else
                "#{attr.name}: {type: :object}"
              end
              }.join(",\n          ") %>
        }
      }

     let(:params) do
        {
          <%= attributes.map.with_index { |attr, i|
            if attr.type ==:decimal
              "#{attr.name}: '#{rand(10000)}'"
            elsif attr.type==:float || attr.type==:integer
              "#{attr.name}: #{rand(100)}"
            elsif attr.type==:string || attr.type==:text
              "#{attr.name}: '#{attr.name.humanize} #{i}'"
            elsif attr.type == :boolean
              "#{attr.name}: #{[true,false].sample}"
            else
              "#{attr.name}: {}"
            end
            }.join(",\n          ") %>
        }
      end

      response '403', 'needs authorization' do
        schema '$ref' => '#/components/schemas/errors_object'
        run_test! do
          expect(json).to match_structure(errors: { status: ['forbidden'] })
        end
      end

      context 'with credentials' do
        before do
          allow_any_instance_of(ApplicationController).to receive(:current_user).and_return(create(:user))
        end

        response '200', 'updates a <%= class_name.downcase.humanize %>' do
          schema json_single('<%= class_name.underscore %>')

          run_test! do
            expect(json).to match_structure(
              data: {
                id: id.to_s, type: String,
                attributes: {
                  <%= attributes.map{|attr|
                  case attr.type
                  when :decimal
                  "#{attr.name.camelize(:lower)}: params[:#{attr.name}].to_s"
                  when :float, :integer
                  "#{attr.name.camelize(:lower)}: params[:#{attr.name}]"
                  when :string, :text
                    "#{attr.name.camelize(:lower)}: params[:#{attr.name}].to_s"
                  else
                  "#{attr.name.camelize(:lower)}: params[:#{attr.name}]"
                  end
                }.join(",\n                ") %>
                }
              }
            )
          end
        end
      end
    end
  end
end
<% end -%>

